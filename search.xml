<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>玩转Hexo-Blog之三：正确的主题安装方式</title>
    <url>/2020/02/12/master-Hexo/Hexo-theme-install/</url>
    <content><![CDATA[<h2 id="写在最前"><a href="#写在最前" class="headerlink" title="写在最前"></a>写在最前</h2><p>在上一篇博文中，博主介绍了<code>Hexo-Blog</code>站点的基本配置步骤。通过实践我们发现，<code>Hexo-Blog</code>站点的配置项其实不多。</p>
<p>在本篇博文中，博主将带领大家进行<code>Hexo-Blog</code>的<code>主题</code>安装。</p>
<p>看到这，可能有小伙伴要问了：<code>主题</code>的安装还不简单？有必要单独花一个篇幅来介绍吗？博主在这里先卖个关子，请你继续往下看。</p>
<a id="more"></a>

<h2 id="Why-Theme-NexT"><a href="#Why-Theme-NexT" class="headerlink" title="Why Theme NexT?"></a>Why Theme NexT?</h2><p>安装<code>主题</code>之前，我们得先挑选一款<code>主题</code>对吧？</p>
<p>Hexo是一个开放的框架，它允许与多种不同的主题融合。<a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a>的官方网站，有一个专门的<a href="https://hexo.io/themes" target="_blank" rel="noopener">Hexo主题</a>页面，上面提供了几百种开发者免费共享的主题，选择性很大，也让人眼花缭乱。</p>
<p>在众多主题中，有不少主题是伴随着Hexo的诞生而设计出来的。</p>
<blockquote>
<p>Hexo was originally created and maintained by <a href="https://github.com/tommy351" target="_blank" rel="noopener">Tommy Chen</a> in 2012. Since then, it has helped thousands of people to build their dream website/blog.</p>
</blockquote>
<p>上述一段话阐述了Hexo的历史，最早由Tommy-Chen在2012年开发出来，至今已有7年以上的历史了。时至今日，有好多主题的作者也已不更新了，因此可能无法适应Hexo框架的发展。</p>
<p>Theme NexT主题借助开源社区，至今仍在更新，最新版为v7.7.1（截止2020年2月11日）。</p>
<p>借用Theme NexT官方的描述，该主题是一款适用于Hexo框架的奢华且功能强大的主题：</p>
<blockquote>
<p>Elegant and Powerful Theme for Hexo</p>
</blockquote>
<p>有几大特色：</p>
<blockquote>
<ul>
<li>Four Schemes in One(集成4种样式)</li>
<li>Multilingual Support(支持15种语言)</li>
<li>Five Code Highlighting Themes(5种代码高亮主题)</li>
<li>Customizable(可定制化)</li>
</ul>
</blockquote>
<p>在这里，尤其是最后一条的<code>可定制化</code>，给众多玩家留下了巨大的可玩性。</p>
<p>另外，目前在各大博客平台，有很多文章介绍了Hexo + NexT主题搭建博客的经验。所以选择这样的组合，意味着当你遇到问题时，有较多资料可供参考。</p>
<h2 id="一般的Theme-NexT安装方式"><a href="#一般的Theme-NexT安装方式" class="headerlink" title="一般的Theme NexT安装方式"></a>一般的Theme NexT安装方式</h2><p>Theme NexT在Github上有一个公开的<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">代码仓库</a>，在它们的<a href="https://theme-next.org" target="_blank" rel="noopener">官网</a>上有详细的安装使用文档。在这里博主将自己实践后最实用的过程介绍一下（俗称：无坑版），总的来说包括以下几个步骤：</p>
<ul>
<li>克隆Theme NexT主题源代码至Hexo博客/themes目录下</li>
<li>修改Hexo站点的配置文件，启用Theme NexT</li>
<li>将Theme NexT配置成你想要的样子</li>
<li>查看效果</li>
</ul>
<h3 id="克隆Theme-NexT主题源代码"><a href="#克隆Theme-NexT主题源代码" class="headerlink" title="克隆Theme NexT主题源代码"></a>克隆Theme NexT主题源代码</h3><p>在已经初始化的<code>Hexo-Blog</code>目录，输入以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">  git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next.git ./themes/theme-next</span></span><br></pre></td></tr></table></figure>

<h3 id="启用Theme-NexT"><a href="#启用Theme-NexT" class="headerlink" title="启用Theme NexT"></a>启用Theme NexT</h3><p>参照《玩转Hexo-Blog之二：站点配置》中的步骤，修改站点的_config.yml文件，启用Theme Next主题：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">theme-next</span></span><br></pre></td></tr></table></figure>

<h3 id="配置Theme-NexT"><a href="#配置Theme-NexT" class="headerlink" title="配置Theme NexT"></a>配置Theme NexT</h3><p>具体的配置过程将放在下一篇博文中介绍。</p>
<h3 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h3><p>在博客文件夹根目录，输入以下命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span>  hexo s</span><br></pre></td></tr></table></figure>

<p>这样你就将最基本的Theme NexT运行起来了。见下图（引自官网）：</p>
<blockquote>
<img src="/2020/02/12/master-Hexo/Hexo-theme-install/next-default-scheme.png" class="" title="Theme-NexT基本样式">
</blockquote>
<h2 id="建立博客站点仓库"><a href="#建立博客站点仓库" class="headerlink" title="建立博客站点仓库"></a>建立博客站点仓库</h2><p>讲到这里，我们看似已经完成了Theme NexT的安装过程。但是一般来说，我们会针对博客站点的源码建立一个Git仓库，以便记录我们建站过程的点点滴滴，最后将其托管在Github等服务器中。</p>
<h3 id="配置并推送到远程仓库备份"><a href="#配置并推送到远程仓库备份" class="headerlink" title="配置并推送到远程仓库备份"></a>配置并推送到远程仓库备份</h3><p>按照上面的操作过程，我们完成了以下步骤：</p>
<ol>
<li><code>Hexo=Blog</code>站点和主题的配置；</li>
<li>Git push到remote仓库；</li>
</ol>
<p>然后我们登陆Github的仓库查看，惊奇地发现了一个灰色的，空的主题文件夹，见下图：</p>
<img src="/2020/02/12/master-Hexo/Hexo-theme-install/grayedout-folder-in-github-without-ref.png" class="" title="空的主题文件夹">

<p>而且我们无法点击文件夹进去查看源代码（因为它是空的）。</p>
<h3 id="为什么无法推送？"><a href="#为什么无法推送？" class="headerlink" title="为什么无法推送？"></a>为什么无法推送？</h3><p>我们来看下为什么无法将博客站点仓库推送到远程仓库备份。</p>
<p>打开Theme NexT的文件夹，同时允许显示隐藏文件，可以发现一个隐藏的“.git”文件夹，到此时我们才醒悟过来：我们忽略了Theme NexT也是一个不断更新的仓库。</p>
<p>不知不觉中，我们其实是建立了一个“嵌入式的Git仓库结构”，即：在<code>Blog-Hexo</code>仓库中，内嵌了一个名为<code>next</code>的仓库。用<a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules" target="_blank" rel="noopener">Git官方文档</a>的说法，叫做：submodule（子模块）。</p>
<h2 id="正确的主题安装方式"><a href="#正确的主题安装方式" class="headerlink" title="正确的主题安装方式"></a>正确的主题安装方式</h2><p>经过了上面的失败，了解了原因之后，我们终于进入本篇博文的正题：如何正确地安装Theme NexT。</p>
<h3 id="重新理顺需求"><a href="#重新理顺需求" class="headerlink" title="重新理顺需求"></a>重新理顺需求</h3><p>我们重新理顺一下需求，如下所示：</p>
<ul>
<li>本地建立博客源码仓库，<strong>记录更新过程</strong></li>
<li>可推送到远程仓库<em>托管</em>，<strong>包括主题的源代码</strong></li>
<li>当Theme NexT有更新时，可<strong><em>拉取作者的更新</em></strong>，<strong><em>合并到修改过的主题源码中</em></strong></li>
</ul>
<p>需求的重点已用加粗方式显示，其中第三点是我们最想要的。之前博主已经说过Theme NexT是一个不断更新的主题，当作者有更新时，如果能将其顺利并入我们修改过的主题源码，是非常方便的。</p>
<h3 id="Fork-Theme-NexT的仓库"><a href="#Fork-Theme-NexT的仓库" class="headerlink" title="Fork Theme NexT的仓库"></a>Fork Theme NexT的仓库</h3><p>第一步是登录Github，将<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">Theme-NexT仓库</a>Fork到自己的账号中。</p>
<p>通过这样的步骤，我们就可以将对主题的修改进行版本控制（Theme NexT官方的仓库我们是无法修改的），同时使主题仓库具备了<code>与时俱进</code>的可能性，可适应第三点需求。</p>
<h3 id="在博客源码仓库建立submodule"><a href="#在博客源码仓库建立submodule" class="headerlink" title="在博客源码仓库建立submodule"></a>在博客源码仓库建立submodule</h3><p>输入以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">  <span class="built_in">cd</span> blog-hexo</span></span><br><span class="line"><span class="meta">$</span><span class="bash">  git submodule add https://github.com/iotfans/hexo-theme-next ./themes/theme-next-iotfans</span></span><br></pre></td></tr></table></figure>

<p>在<code>Hexo-Blog</code>博客源码仓库中建立submodule，命名为<code>theme-next-个性名字</code>，意思是我们修改过的版本。并将其指向我们在Github上Fork过来的Theme NexT仓库(<a href="https://github.com/iotfans/hexo-theme-next)。" target="_blank" rel="noopener">https://github.com/iotfans/hexo-theme-next)。</a></p>
<h3 id="启用修改版的主题-config-yml文件"><a href="#启用修改版的主题-config-yml文件" class="headerlink" title="启用修改版的主题(_config.yml文件)"></a>启用修改版的主题(_config.yml文件)</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">theme-next-iotfans</span></span><br></pre></td></tr></table></figure>

<h3 id="查看submodule指向情况"><a href="#查看submodule指向情况" class="headerlink" title="查看submodule指向情况"></a>查看submodule指向情况</h3><p>通过这样的建仓方式，我们拥有了两个独立的仓库，一个是<code>blog-hexo</code>，另一个是个性主题<code>theme-next-iotfans</code>。</p>
<p>在<code>blog-hexo</code>根目录下运行以下命令查看submodule的指向情况：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">  git submodule</span></span><br></pre></td></tr></table></figure>

<p>我们可以看到submodule指向了某个commit，如下图所示：</p>
<img src="/2020/02/12/master-Hexo/Hexo-theme-install/git-submodule.png" class="" title="查看submodule指向情况">

<p>而且在Github网页中，也可以看到相同的效果，如下图所示：</p>
<img src="/2020/02/12/master-Hexo/Hexo-theme-install/submodule-github.png" class="" title="查看submodule指向情况">

<p>细心的小伙伴可能发现了，本地博客源码的submodule指向的主题commit ID和Github网页上的不同，原因是博主已将主题的更新push到Github服务器上，而主题的更新还未推送。</p>
<h3 id="为Theme-NexT主题开分支dev-xxx"><a href="#为Theme-NexT主题开分支dev-xxx" class="headerlink" title="为Theme NexT主题开分支dev-xxx"></a>为Theme NexT主题开分支dev-xxx</h3><p>前面说到，Theme NexT是一个不断更新的主题，同时我们也希望能顺利<code>pull</code>到作者的更新。作者一般会将更新发布到master分支上，为了避免冲突，我们最好保持master分支的完整（不要在其上进行改动）。</p>
<p>因此我们在Theme NexT主题仓库中专门开一个dev-xxx分支，其中xxx为个性名字，代表是你修改的。见下面的<code>SourceTree</code>软件的截图，博主开了一个dev-iotfans的分支。</p>
<img src="/2020/02/12/master-Hexo/Hexo-theme-install/dev-iotfans-branch.png" class="" title="为Theme-NexT开develop分支">

<h3 id="在两台PC之间同步"><a href="#在两台PC之间同步" class="headerlink" title="在两台PC之间同步"></a>在两台PC之间同步</h3><p>输入以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">  <span class="built_in">cd</span> blog-hexo</span></span><br><span class="line"><span class="meta">$</span><span class="bash">  git pull</span></span><br><span class="line"><span class="meta">$</span><span class="bash">  git submodule update</span></span><br></pre></td></tr></table></figure>



<h3 id="在一台全新的PC上恢复博客源码仓库"><a href="#在一台全新的PC上恢复博客源码仓库" class="headerlink" title="在一台全新的PC上恢复博客源码仓库"></a>在一台全新的PC上恢复博客源码仓库</h3><p>输入以下命令，从Github上恢复博客源码，并安装hexo：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">  git <span class="built_in">clone</span> git@github.com:&lt;用户名&gt;/&lt;仓库名&gt;.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash">  <span class="built_in">cd</span> blog-hexo</span></span><br><span class="line"><span class="meta">$</span><span class="bash">  git submodule update --init</span></span><br><span class="line"><span class="meta">$</span><span class="bash">  npm install hexo -save</span></span><br></pre></td></tr></table></figure>

<p>上述命令中<code>--init</code>参数用于从远程仓库中下载submodule源码。</p>
<h3 id="Done"><a href="#Done" class="headerlink" title="Done"></a>Done</h3><p>至此我们完成了Theme NexT的正确安装。</p>
]]></content>
      <categories>
        <category>玩转Hexo-Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Git</tag>
        <tag>Github</tag>
        <tag>NexT</tag>
        <tag>submodule</tag>
        <tag>Theme</tag>
      </tags>
  </entry>
  <entry>
    <title>玩转Hexo-Blog之五：功能强化</title>
    <url>/2020/02/11/master-Hexo/Hexo-function-reinforce/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>Git</tag>
        <tag>Github</tag>
        <tag>NexT</tag>
        <tag>deploy</tag>
      </tags>
  </entry>
  <entry>
    <title>玩转Hexo-Blog之四：NexT主题的配置</title>
    <url>/2020/02/11/master-Hexo/Hexo-theme-config/</url>
    <content><![CDATA[<h2 id="写在最前"><a href="#写在最前" class="headerlink" title="写在最前"></a>写在最前</h2><p>在上一篇博文中，博主介绍了Theme Next主题的正确安装方式。通过实践，我们已完成了以下工作：</p>
<ul>
<li>为<code>Hexo-Blog</code>配置了Theme NexT</li>
<li>建立了本地和远程的仓库（博客源码仓库、修改过的Theme NexT主题仓库），其中Theme NexT以submodule子模块的形式存在</li>
<li>为Theme NexT仓库开了dev-xxx分支（确保master分支不受改动，可顺利pull作者的更新）</li>
</ul>
<p>在<code>Hexo-Blog</code>的建站过程中，还有一项比较重要的工作就是<code>主题</code>的配置。如果将<code>Hexo</code>比作建筑的框架，那么<code>主题</code>就是房间的内饰，你可以根据自己的喜好将房间装饰成不同的风格。</p>
<p>在本篇博文中，博主将带领大家进行Theme NexT<code>主题</code>的配置。</p>
<a id="more"></a>











]]></content>
      <categories>
        <category>玩转Hexo-Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Git</tag>
        <tag>Github</tag>
        <tag>NexT</tag>
        <tag>submodule</tag>
        <tag>Theme</tag>
      </tags>
  </entry>
  <entry>
    <title>玩转Hexo-Blog之二：站点基本配置</title>
    <url>/2020/02/11/master-Hexo/Hexo-site-config/</url>
    <content><![CDATA[<h2 id="写在最前"><a href="#写在最前" class="headerlink" title="写在最前"></a>写在最前</h2><p>上一篇博文介绍了基于Hexo框架的博客搭建之环境安装，主要流程包括：</p>
<ul>
<li>安装Node.js和Git</li>
<li>安装Hexo</li>
<li>Hexo站点Init</li>
<li>查看效果</li>
</ul>
<p>可以看到，搭建一个基本的<code>Hexo-Blog</code>还是不难的。但是我们知道，没有经过配置和填入内容的博客站点是没有灵魂的。从本篇博文开始，博主将带大家一步一步对站点进行配置，定制一个可彰显自己个性的Blog站点。</p>
<p>本文将介绍<code>Hexo-Blog</code>站点的基本配置。</p>
<a id="more"></a>

<h2 id="Hexo-Blog站点配置涉及的文件"><a href="#Hexo-Blog站点配置涉及的文件" class="headerlink" title="Hexo-Blog站点配置涉及的文件"></a>Hexo-Blog站点配置涉及的文件</h2><p>Hexo框架的博客站点配置文件为博客根文件夹下的<code>_config.yml</code>文件，这是一个采用YAML(YAML Aint Markup Language)语法编写的文件。如下图所示：</p>
<img src="/2020/02/11/master-Hexo/Hexo-site-config/site-config-file.jpg" class="" title="Hexo站点配置文件">

<p>由于该文件中配置选项较多，并不是所有都能用上，因此挑部分常见的进行说明。</p>
<h2 id="站点基本信息配置"><a href="#站点基本信息配置" class="headerlink" title="站点基本信息配置"></a>站点基本信息配置</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span>		<span class="comment"># 站点标题</span></span><br><span class="line"><span class="attr">subtitle:</span>	<span class="comment"># 子标题</span></span><br><span class="line"><span class="attr">description:</span>	<span class="comment"># 站点描述</span></span><br><span class="line"><span class="attr">keywords:</span>	<span class="comment"># 站点关键字</span></span><br><span class="line"><span class="attr">author:</span>		<span class="comment"># 站点主人</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span>	<span class="comment"># 站点语言		</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">'Asia/Shanghai'</span>	<span class="comment"># 站点所在地时区</span></span><br></pre></td></tr></table></figure>



<h2 id="站点URL配置"><a href="#站点URL配置" class="headerlink" title="站点URL配置"></a>站点URL配置</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://iotfans.gitee.io/</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br></pre></td></tr></table></figure>

<p>这里举了博主在<a href="https://gitee.com/help/articles/4136" target="_blank" rel="noopener">Gitee Pages</a>上托管的的URL地址作为例子。由于博主的Gitee Pages服务采用的是User WebSite，所以首页访问地址不带二级目录，则<code>root:</code>选项直接配置为”/“即可。</p>
<h2 id="站点文件夹配置"><a href="#站点文件夹配置" class="headerlink" title="站点文件夹配置"></a>站点文件夹配置</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span>		<span class="comment"># 源码文件夹(MarkDown文章)</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span>		<span class="comment"># 静态网页生成文件夹</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span>			<span class="comment"># 标签页面文件夹</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span>		<span class="comment"># 归档页面文件夹</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span>	<span class="comment"># 分类页面文件夹</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span>	<span class="comment"># 代码文件夹</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span>			<span class="comment"># 语言支持文件夹</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br></pre></td></tr></table></figure>

<p>这里配置的是站点各资源所在的文件夹名称，一般保持默认即可。</p>
<h2 id="Hexo主题配置"><a href="#Hexo主题配置" class="headerlink" title="Hexo主题配置"></a>Hexo主题配置</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">theme-next</span> 	<span class="comment"># 当前Hexo站点采用的主题</span></span><br><span class="line"><span class="comment">#theme: landscape</span></span><br></pre></td></tr></table></figure>

<p>在上述配置项中，指定了Hexo框架使用<code>theme-next</code>主题（<code>NexT主题</code>是一种十分优雅、简约且功能强大的主题），在下一篇博文中将详细介绍<code>NexT主题</code>的配置。同时，我们可以看到，默认主题<code>landscape</code>被注释掉了。</p>
<p>至此，我们完成了Hexo-Blog站点的基本配置。</p>
]]></content>
      <categories>
        <category>玩转Hexo-Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Git</tag>
        <tag>Github</tag>
        <tag>NexT</tag>
        <tag>deploy</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/02/11/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>玩转Hexo-Blog之一：环境搭建</title>
    <url>/2020/02/07/master-Hexo/Hexo-env-install/</url>
    <content><![CDATA[<h2 id="写在最前"><a href="#写在最前" class="headerlink" title="写在最前"></a>写在最前</h2><p>作为一名电子信息类行业的从业者，博主时常叹当今科技发展速度之迅速，在工作与生活中经常与智能硬件产品打交道，也对当今物联网与人工智能技术应用充满了好奇心（说白了就是学，学，学……）。  </p>
<p>在新技术的学习过程中，踩坑是常事。其实，踩坑不要紧，更重要的是避免下次犯同样的错误。俗话说得好：好记性不如烂笔头。对于聪明的学习者来说，做好笔记，便于自己将来查看的同时还能有利于后来者，何乐而不为？  </p>
<a id="more"></a>

<p>鉴于以上原因，在当前“云大物智”飞速发展的时代，自然很容易想到将学习经验分享到博客（blog）上。知名的博客网站包括<a href="https://www.csdn.net" target="_blank" rel="noopener">CSDN</a>、<a href="https://www.jianshu.com/" target="_blank" rel="noopener">简书</a>、<a href="https://www.cnblogs.com" target="_blank" rel="noopener">博客园</a>等等，我也经常在以上网站浏览大牛的技术分享文章。在调研的过程中，我接触了大牛自己搭建的个人博客，一般是采用当前流行了<a href="https://hexo.io" target="_blank" rel="noopener">Hexo框架</a>加<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT主题</a>的搭配。博主喜欢探索新事物的秉性一下子就占了上风，选取了上述主流方案进行DIY。  </p>
<p>由于博主非计算机专业科班出生，在实践的过程中自然经历了连连踩坑与频繁出坑的过程。搭建成功之时，第一感觉不是庆祝，而是迫不及待地想把整个过程记录下来。  </p>
<p>以上则是博主写此系列博客的原因。</p>
<h2 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h2><p>先来了解一下什么是Hexo，这里引用官网的一张截图，如下所示。</p>
<img src="/2020/02/07/master-Hexo/Hexo-env-install/what-is-hexo.png" class="" title="什么是Hexo">

<blockquote>
<p>Hexo是一个快速简介且高效的博客框架，它使用 <a href="https://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
</blockquote>
<h2 id="Hexo环境搭建"><a href="#Hexo环境搭建" class="headerlink" title="Hexo环境搭建"></a>Hexo环境搭建</h2><p>Hexo所需的环境很简单，主要有以下两项：</p>
<ul>
<li><p>Node.js</p>
</li>
<li><p>Git</p>
</li>
</ul>
<p>其中Git的安装过程请参考玩转Git系列的<a href="">Git简介及其安装</a>，这里主要介绍Node.js的安装步骤，以下一小段文字引用自Hexo中文文档。</p>
<blockquote>
<p>Node.js 为大多数平台提供了官方的 <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">安装程序</a>。对于中国大陆地区用户，可以前往 <a href="https://npm.taobao.org/mirrors/node" target="_blank" rel="noopener">淘宝 Node.js 镜像</a> 下载。</p>
<p>其它的安装方法：</p>
<ul>
<li>Windows：通过 <a href="https://github.com/jasongin/nvs/" target="_blank" rel="noopener">nvs</a>（推荐）或者<a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noopener">nvm</a> 安装。</li>
<li>Mac：使用 <a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a> 或 <a href="http://www.macports.org/" target="_blank" rel="noopener">MacPorts</a> 安装。</li>
<li>Linux（DEB/RPM-based）：从 <a href="https://github.com/nodesource/distributions" target="_blank" rel="noopener">NodeSource</a> 安装。</li>
<li>其它：使用相应的软件包管理器进行安装，可以参考由 Node.js 提供的 <a href="https://nodejs.org/en/download/package-manager/" target="_blank" rel="noopener">指导</a>。</li>
</ul>
</blockquote>
<p>当Node.js和Git安装完毕后，就可以开始正式安装Hexo了。在任意位置点击鼠标右键，选择”git-bash here”选项进入git-bash命令行，输入以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">  npm install -g hexo-cli</span></span><br></pre></td></tr></table></figure>

<p>等待一段时间后未发现提示错误即表示安装成功。</p>
<p>我们也在bash中输入以下命令进行验证，若安装成功会出现hexo命令使用指南，如下图所示。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">  hexo</span></span><br></pre></td></tr></table></figure>

<img src="/2020/02/07/master-Hexo/Hexo-env-install/hexo-install-success.png" class="" title="Hexo安装成功图">

<h2 id="建站（生成初始代码）"><a href="#建站（生成初始代码）" class="headerlink" title="建站（生成初始代码）"></a>建站（生成初始代码）</h2><p>Hexo安装完毕后，输入以下命令，Hexo将在指定的文件夹生成初始代码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">  hexo init &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash">  <span class="built_in">cd</span> &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash">  npm install</span></span><br></pre></td></tr></table></figure>

<p>等待初始代码从Hexo的Github仓库中Clone下来以后，你会发现你的个人博客网站的文件夹层级结构是下面这个样子的，相应文件夹和文件的作用请查看后面的注释。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml		&#x2F;&#x2F; 网站的配置信息</span><br><span class="line">├── package.json	&#x2F;&#x2F; 应用程序的信息</span><br><span class="line">├── scaffolds		&#x2F;&#x2F; 模板文件夹</span><br><span class="line">├── source		&#x2F;&#x2F; 博客源代码（markdown文件存放在此处）</span><br><span class="line">|   ├── _drafts		&#x2F;&#x2F; 草稿文件</span><br><span class="line">|   └── _posts		&#x2F;&#x2F; 需发布的文件</span><br><span class="line">└── themes		&#x2F;&#x2F; 主题文件夹</span><br></pre></td></tr></table></figure>

<p>下面对上述文件夹和文件的作用进行介绍，相关文字引用自<a href="https://hexo.io/zh-cn/docs/setup" target="_blank" rel="noopener">Hexo中文文档</a>。</p>
<blockquote>
<h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3><p>网站的 配置 信息，您可以在此配置大部分的参数。</p>
<h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">package.json</span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">"name"</span>: <span class="string">"hexo-site"</span>,</span><br><span class="line">   <span class="attr">"version"</span>: <span class="string">"0.0.0"</span>,</span><br><span class="line">   <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">   <span class="attr">"hexo"</span>: &#123;</span><br><span class="line">       <span class="attr">"version"</span>: <span class="string">""</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">       <span class="attr">"hexo"</span>: <span class="string">"^3.8.0"</span>,</span><br><span class="line">       <span class="attr">"hexo-generator-archive"</span>: <span class="string">"^0.1.5"</span>,</span><br><span class="line">       <span class="attr">"hexo-generator-category"</span>: <span class="string">"^0.1.3"</span>,</span><br><span class="line">       <span class="attr">"hexo-generator-index"</span>: <span class="string">"^0.2.1"</span>,</span><br><span class="line">       <span class="attr">"hexo-generator-tag"</span>: <span class="string">"^0.2.0"</span>,</span><br><span class="line">       <span class="attr">"hexo-renderer-ejs"</span>: <span class="string">"^0.3.1"</span>,</span><br><span class="line">       <span class="attr">"hexo-renderer-stylus"</span>: <span class="string">"^0.3.3"</span>,</span><br><span class="line">       <span class="attr">"hexo-renderer-marked"</span>: <span class="string">"^0.3.2"</span>,</span><br><span class="line">       <span class="attr">"hexo-server"</span>: <span class="string">"^0.3.3"</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="scaffolds文件夹"><a href="#scaffolds文件夹" class="headerlink" title="scaffolds文件夹"></a>scaffolds文件夹</h3><p>模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。<br>Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p>
<h3 id="source文件夹"><a href="#source文件夹" class="headerlink" title="source文件夹"></a>source文件夹</h3><p>资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</p>
<h3 id="themes文件夹"><a href="#themes文件夹" class="headerlink" title="themes文件夹"></a>themes文件夹</h3><p>主题 文件夹。Hexo 会根据主题来生成静态页面。</p>
</blockquote>
<h2 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h2><p>了解了Hexo框架各文件和文件夹的作用之后，我们发现Hexo框架还是比较复杂的，可玩性和配置参数较多。在正式进入配置之前，我们可以先看下网站运行起来的效果。在命令行中输入以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">  hexo s</span></span><br></pre></td></tr></table></figure>

<p>等待Hexo编译通过后，Web网页服务搭建成功。打开浏览器输入以下网址即可以看到运行效果：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">http://local:4000</span><br></pre></td></tr></table></figure>

<img src="/2020/02/07/master-Hexo/Hexo-env-install/first-hexo-page.png" class="" title="初次运行Hexo效果">

]]></content>
      <categories>
        <category>玩转Hexo-Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Git</tag>
        <tag>Github</tag>
        <tag>NexT</tag>
        <tag>deploy</tag>
      </tags>
  </entry>
  <entry>
    <title>Git环境搭建（玩转Git系列之二）</title>
    <url>/2020/02/06/master-Git/Git-installation/</url>
    <content><![CDATA[<img src="/2020/02/06/master-Git/Git-installation/Bduck.jpg" class="" title="style&#x3D;zoom:50% This is an example image">
]]></content>
      <categories>
        <category>玩转Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>版本控制</tag>
      </tags>
  </entry>
  <entry>
    <title>Git简介（玩转Git系列之一）</title>
    <url>/2020/02/06/master-Git/Git-description/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>玩转Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>版本控制</tag>
      </tags>
  </entry>
</search>
